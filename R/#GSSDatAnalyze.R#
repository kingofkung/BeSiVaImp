## Begin analyzing GSS Data
rm(list = ls())
source("GSSDatFix.R")
source("BeSiVaFunctions.R")


devee <- "vote12bin"
## colnames(dat)


## Keep some data held out
## First, make sure our DV Is included in all cases rows
dat2 <- dat[complete.cases(dat$vote12bin),]
dat2$vote12bin



## get the sample of rows
set.seed(12345)
test <- sample(seq_along(dat2$vote12bin), size = round(nrow(dat2)/10))


## Figure out which rows have few categories, so we can eliminate them later.
ncats <- lapply(colnames(dat2), function(x) length(unique(dat2[-test,x])))



## Keep some columns from being used. Specifically, columns that have
## either 1 or over 100 values, and those that
avoidcols <- c("year", "id", "ballot", "version", "issp", "formwt", "sampcode", "sample", "phase", "spanself", "spanint", "spaneng", "vote12","wtss", "wtssnr", "wtssall", "vrstrat", "vpsu", "vote12bin","wtcomb",
               colnames(dat)[ which(ncats>50)], colnames(dat)[ which(ncats==1)] )


## How can I figure out if a column is now all na's?

## all(is.na(dat2[,"othpolw"]))

whichcols <- lapply(colnames(dat2), function(x) all(is.na(dat2[-test ,x]))) == TRUE

allnas <- colnames(dat2)[ whichcols ]

## Now, how can I figure out if a column is majority nas?
library(caret)
mostlynas <- colnames(dat2)[nearZeroVar(dat2[-test,])]


## dat2[-test, 3]



napercs <- lapply(colnames(dat2), function(x)  sum(is.na(dat2[-test, x]))/2137  )



avoidcols <- c(avoidcols, allnas, mostlynas, colnames(dat2)[which(napercs>.8)])


## Keep vote12, and the sample/weight info out of the data
colstouse <- colnames(dat2)[!colnames(dat2) %in% avoidcols]

length(colnames(dat2)) -  length(unique(avoidcols))

length(unique(colstouse))




## Placein will be where we store the variables we want included
placein <- ""

formulae <- lapply(colstouse, function(x) as.formula(paste0(devee, " ~ ",x, placein  )) )


glms <- lapply(formulae, function(x){
    print("\n")
    print(x)
    try(
        y <- glm(x, family = "binomial", data = dat2[-test, ])
    )
    print(y)
    y
}
               )


## formulae[[733]]
## dat2$relhhd8


## print(glms)

head(glms)

predictions <- lapply(glms, function(x)  try(predictr( x  , data = dat2, rowstouse = test)))


pcps <- unlist(lapply(predictions, function(x)  getpcp(x, dat2$vote12bin[test]) ))

IVs <- unlist(lapply(formulae, function(x) as.character(x)[3]))

round1output <- data.frame(IVs, "pcps" =  as.numeric(pcps))[order(pcps, decreasing = TRUE), ]

## badvars <- as.character(round1output[(nrow(round1output)-3):nrow(round1output),"IVs"])

## head(dat2[, badvars])
